import { OffsetElementList } from '../../../shared';
import { ContentsProviderModel, ContentsProviderCdo, ContentsProviderIdNameRdo, ContentsProviderRdo, ContentsProviderWithCubeCountRom } from '../model';
/**
 * 컨텐츠 제공자 생성
 * @param contentsProviderCdo
 */
export declare function registerContentsProvider(contentsProviderCdo: ContentsProviderCdo): Promise<string>;
/**
 * 컨텐츠 제공자 조회
 * @param contentsProviderId
 */
export declare function findContentsProvider(contentsProviderId: string): Promise<ContentsProviderModel>;
/**
 * providerName으로 컨텐츠 제공자
 * @param providerName
 */
export declare function findByProviderName(providerName: string): Promise<string>;
/**
 * 컨텐츠 제공자 전체 목록 조회
 */
export declare function findAllContentsProviders(): Promise<ContentsProviderModel[]>;
/**
 * 검색 조건 컨텐츠 제공자, 큐브 개수 목록 조회
 * @param contentsProviderRdo
 */
export declare function findContentsProvidersByRdo(contentsProviderRdo: ContentsProviderRdo): Promise<OffsetElementList<ContentsProviderWithCubeCountRom>>;
/**
 * 컨텐츠 제공자 수정
 * @param contentsProviderId
 * @param contentsProviderCdo
 */
export declare function modifyContentsProvider(contentsProviderId: string, contentsProviderCdo: ContentsProviderCdo): Promise<void>;
/**
 * 컨텐츠 제공자 삭제
 * @param contentsProviderId
 */
export declare function removeContentsProvider(contentsProviderId: string): Promise<void>;
/**
 * 컨텐츠 제공자 이름 중복 확인
 * @param providerName
 */
export declare function existsByProviderName(providerName: string): Promise<boolean>;
/**
 * CubeId 배열로 컨텐츠 제공자 이름 목록 조회
 * @param cubeIds
 */
export declare function findContentsProviderIdNames(cubeIds: string[]): Promise<ContentsProviderIdNameRdo[]>;
