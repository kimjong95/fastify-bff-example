import { NameValueList, OffsetElementList } from '../../../shared';
import { UserIdentityRdo } from '../../../learning';
import { InvitationSdo, SmsSender, SmsSenderQdo, User, UserByEmailQdo, UserDetailRdo, UserGroupSequencesUdo, UserModificationRdo, UserQdo, UserUdo, UserWithAdditionalInfoRdo, UserWithInvitationRdo, UserWithPisAgreementRdo, UserWithSmsSenderRdo } from '../model';
/**
 * 유저 조회
 * @param id
 */
export declare function findUser_Admin(id: string): Promise<User>;
/**
 * 유저, 유저 추자 정보 조회
 * @param id
 */
export declare function findUserWithAdditionalInfo_Admin(id: string): Promise<UserWithAdditionalInfoRdo>;
/**
 * 유저 상세 조회
 * @param id
 */
export declare function findUserDetail_Admin(id: string): Promise<UserDetailRdo>;
/**
 * 검색 조건 유저 목록 조회
 * @param query
 */
export declare function findUsers_Admin(query: UserQdo): Promise<OffsetElementList<User>>;
/**
 * 검색 조건 초대 유저 목록 조회
 * @param query
 */
export declare function findUsersWithInvitation_Admin(query: UserQdo): Promise<OffsetElementList<UserWithInvitationRdo>>;
/**
 * 검색 조건 유저, 동의여부 조회
 * @param query
 */
export declare function findUsersWithPisAgreement_Admin(query: UserQdo): Promise<OffsetElementList<UserWithPisAgreementRdo>>;
/**
 * 유저 수정
 * @param id
 * @param nameValues
 */
export declare function modifyUser_Admin(id: string, nameValues: NameValueList): Promise<void>;
/**
 * 유저 멀티 수정
 * @param userUdos
 */
export declare function modifyUsers_Admin(userUdos: UserUdo[]): Promise<UserModificationRdo>;
/**
 * 유저 초대
 * @param invitationSdos
 */
export declare function inviteUsers_Admin(invitationSdos: InvitationSdo[]): Promise<void>;
/**
 * User 에 UserGroup 할당 ( Assign )
 * @param userGroupSequencesUdo
 */
export declare function assignUserGroupSequences_Admin(userGroupSequencesUdo: UserGroupSequencesUdo): Promise<void>;
/**
 * User 에 UserGroup 재할당 ( ReAssign => 기존 지우고 새로 할당 )
 * @param userGroupSequencesUdo
 */
export declare function reassignUserGroupSequences_Admin(userGroupSequencesUdo: UserGroupSequencesUdo): Promise<void>;
/**
 * User 에 UserGroup 할당 해제
 * @param userGroupSequencesUdo
 */
export declare function withdrawUserGroupSequences_Admin(userGroupSequencesUdo: UserGroupSequencesUdo): Promise<void>;
/**
 * email로 멤버쉽 자격 재할당
 * @param email
 * @param is200Membership
 * @param isMembershipManagedManually
 */
export declare function reassignMembershipUserGroupByEmail_Admin(email: string, is200Membership: boolean, isMembershipManagedManually: boolean): Promise<void>;
/**
 * SMS 발송자 자격 부여
 * @param id
 */
export declare function qualifySmsSender_Admin(id: string): Promise<void>;
/**
 * SMS 발송자 자격 박탈
 * @param id
 */
export declare function disqualifySmsSender_Admin(id: string): Promise<void>;
/**
 * SMS 발송자 목록 조회
 * @param smsSenderQdo
 */
export declare function findSmsSenders_Admin(smsSenderQdo: SmsSenderQdo): Promise<SmsSender[]>;
/**
 * 검색 조건 유저, SMS 발송자 목록 조회
 * @param smsSenderQdo
 */
export declare function findUserWithSmsSenders_Admin(smsSenderQdo: SmsSenderQdo): Promise<UserWithSmsSenderRdo[]>;
/**
 * email 배열로 유저 목록 조회
 * @param userByEmailQdo
 */
export declare function findByUserByEmailRdo_Admin(userByEmailQdo: UserByEmailQdo): Promise<User[]>;
/**
 * denizenId 배열로 유저 목록 조회
 * @param denizenIds
 */
export declare function findUserIdentityRdosByDenizenIds_Admin(denizenIds: string[]): Promise<UserIdentityRdo[]>;
