import { LearningState, OffsetElementList } from '../../../shared';
import { ExtraTaskType, MarkCompleteUdo, MyCardRelatedStudentsRdo, MySuniMediaRequestQdo, PaidCourseStudentQdo, PaidCourseStudentRdo, Student, StudentAcceptOrRejectUdo, StudentCdo, StudentCount, StudentCountQdo, StudentHideUdo, StudentReportSdo, UserCardStudentQdo } from '../model';
import { PaidCourseStudentCountQdo } from '../model/sdo/PaidCourseStudentCountQdo';
/**
 * 학생 조회
 * @param id
 */
export declare function findStudents(id: string): Promise<Student>;
/**
 * cardId로 학생 조회
 * @param cardId
 */
export declare function findStudentsByCardId(cardId: string): Promise<Student>;
/**
 * cubeId로 학생 조회
 * @param cubeId
 * @param round
 */
export declare function findStudentsByCubeId(cubeId: string, round: number): Promise<Student>;
/**
 * cardId 배열로 학생 목록 조회
 * @param cardIds
 */
export declare function findCardStudentsByCardIds(cardIds: string[]): Promise<Student[]>;
export declare function findCardStudentsByCardIdsExtended(cardIds: string[]): Promise<Student[]>;
/**
 * cardId, 학습상태 조건 학생 목록 조회
 * @param cardIds
 * @param learningState
 */
export declare function findCardStudentsByCardIdsAndLearningState(cardIds: string[], learningState: LearningState): Promise<Student[]>;
/**
 * 현재 사용자의 관련 카드 학생 목록 조회
 * @param cardId
 */
export declare function findMyCardRelatedStudents(cardId: string): Promise<MyCardRelatedStudentsRdo>;
/**
 * 학생 숨김 처리
 * @param studentHideUdo
 */
export declare function hideStudent(studentHideUdo: StudentHideUdo): Promise<boolean>;
/**
 * studentId로 학생 진행 상황 조회
 * @param studentId
 * @param syncPlaytime
 */
export declare function confirmProgressByStudentId(studentId: string, syncPlaytime: boolean): Promise<Student>;
/**
 * lectureId, 학습 상태 학생 수 조회
 * @param lectureId
 * @param learningState
 */
export declare function countByLectureIdAndLearningState(lectureId: string, learningState: LearningState): Promise<number>;
/**
 * 학습 완료 표시
 * @param markCompleteUdo
 */
export declare function markComplete(markCompleteUdo: MarkCompleteUdo): Promise<void>;
/**
 * 학생 생성
 * @param studentCdo
 */
export declare function register(studentCdo: StudentCdo): Promise<string>;
/**
 * Task 저장
 * @param id
 * @param extraTaskType
 */
export declare function saveTask(id: string, extraTaskType: ExtraTaskType): Promise<void>;
/**
 * Task 제출
 * @param id
 * @param extraTaskType
 */
export declare function submitTask(id: string, extraTaskType: ExtraTaskType): Promise<void>;
/**
 * 과제 생성
 * @param studentReport
 */
export declare function registerReport(studentReport: StudentReportSdo): Promise<void>;
/**
 * 학생 신청 승인
 * @param studentAcceptOrRejectUdo
 */
export declare function acceptStudent(studentAcceptOrRejectUdo: StudentAcceptOrRejectUdo): Promise<void>;
/**
 * 학생 신청 반려
 * @param studentAcceptOrRejectUdo
 */
export declare function rejectStudent(studentAcceptOrRejectUdo: StudentAcceptOrRejectUdo): Promise<void>;
/**
 * 학생 수 조회
 * @param studentCountQdo
 */
export declare function countStudents(studentCountQdo: StudentCountQdo): Promise<StudentCount>;
/**
 * id 배열로 학생 신청 취소
 * @param ids
 */
export declare function cancelStudents(ids: string[]): Promise<void>;
/**
 * id 배열로 학생 삭제
 * @param ids
 */
export declare function removeByIds(ids: string[]): Promise<void>;
/**
 * 파놉도 사용 통계 수정(?)
 * @param mySuniMediaRequestQdo
 */
export declare function panoptoUsageStatistics(mySuniMediaRequestQdo: MySuniMediaRequestQdo): Promise<void>;
/**
 * 검색 조건 카드 학생 목록 조회
 * @param userCardStudentQdo
 */
export declare function findCardStudentsByQdo(userCardStudentQdo: UserCardStudentQdo): Promise<Student[]>;
/**
 * 검색 조건 유료 과정 학생 목록 조회
 * @param paidCourseStudentQdo
 */
export declare function findPaidCourseStudent(paidCourseStudentQdo: PaidCourseStudentQdo): Promise<OffsetElementList<PaidCourseStudentRdo>>;
/**
 * 검색 조건 유료 과정 학생 수 조회
 * @param paidCourseStudentQdo
 */
export declare function findPaidCourseStudentCount(paidCourseStudentQdo: PaidCourseStudentCountQdo): Promise<StudentCount>;
/**
 * 승인요청 처리 안한 게 있는지 여부 조회
 */
export declare function existsUpToDatePaidCourse(): Promise<boolean>;
