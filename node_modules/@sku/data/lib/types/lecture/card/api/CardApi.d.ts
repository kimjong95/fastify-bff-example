import { Language, IdPolyglotName, OffsetElementList } from '../../../shared';
import { BlendedChapter, Card, CardByIdQdo, CardCount, CardCountQdo, Talk, CardForUserViewByIdQdo, CardForUserViewRdo, CardFromCardBundleQdo, CardIdQdo, CardOrderBy, CardQdo, CardTypeAndCardCountRdo, CardWithContentsAndRelatedCountRdo, CardWithLearningContentCountRdo, CardWithPhaseCountForUserViewRdo, CardWithPhaseCountQdo, CardWithRelatedCountRdo, ChannelAndCardCountRdo, CollegeAndCardCountRdo, EnrollmentCardDetailQdo, EnrollmentCardDetailRdo, MigCardIdMapping, MyLearningRdo, PlaylistCardRdo, PlaylistCardWithProgressRdo, RecommendCardRdo, ScheduledLearningRdo, EnrollingCardForUserViewRdo, CardRelatedCount, CardCubeIdPairQdo, RelatedLearningContentRdo } from '../model';
/**
 * 카드, 관련 개수 조회
 * @param id
 */
export declare function findCardWithRelatedCountRdo(id: string): Promise<CardWithRelatedCountRdo>;
/**
 * 카드 담당자 확인
 * @param cardId
 * @param email
 * @param name
 */
export declare function checkOperatorByEmailAndName(cardId: string, email: string, name: string): Promise<boolean>;
/**
 * cardId 배열로 카드, 관련 개수 목록 조회
 * @param ids
 */
export declare function findCards(ids: string[]): Promise<CardWithRelatedCountRdo[]>;
/**
 * cardId 배열로 카드(유저 대상) 목록 조회 (Get)
 * @param ids
 */
export declare function findCardForUserViewRdos(ids: string[]): Promise<CardForUserViewRdo[]>;
/**
 * cardId 배열로 카드[유저 대상] 목록 조회 (POST)
 * @param cardForUserViewByIdQdo
 */
export declare function findCardForUserViewRdosInPost(cardForUserViewByIdQdo: CardForUserViewByIdQdo): Promise<CardForUserViewRdo[]>;
/**
 * cardId 배열로 카드[유저 대상],과정 개수 목록 조회 (Get)
 * @param ids
 */
export declare function findCardWithPhaseCountForUserViewRdos(ids: string[]): Promise<CardWithPhaseCountForUserViewRdo[]>;
/**
 * cardId 배열로 Badge 에서 카드 진행상황을 조회 (POST)
 * @param ids
 */
export declare function findMyCardProgress(cardIds: string[]): Promise<CardWithPhaseCountForUserViewRdo[]>;
/**
 * cardId 배열로 LRS 카드[유저 대상] 목록 조회
 * @param ids
 */
export declare function findCardsWithoutLearningExperience(ids: string[]): Promise<CardForUserViewRdo[]>;
/**
 * 현자 사용자의 최근 학습 카드 목록 조회
 * @param count
 */
export declare function findMyLatestLearningCards(count: number): Promise<CardForUserViewRdo[]>;
/**
 * cardId 배열로 카드,학습정보 목록 조회
 * @param ids
 */
export declare function findCardWithLearningContentCounts(ids: string[]): Promise<CardWithLearningContentCountRdo[]>;
/**
 * 검색 조건 카드, 카드내용, 관련 개수 목록 조회
 * @param cardQdo
 */
export declare function findCardByRdo(cardQdo: CardQdo): Promise<OffsetElementList<CardWithContentsAndRelatedCountRdo>>;
/**
 * cardId 배열로 카드, 카드내용, 관련 개수 목록 조회
 * @param cardByIdQdo
 */
export declare function findCardByIds(cardByIdQdo: CardByIdQdo): Promise<CardWithContentsAndRelatedCountRdo[]>;
/**
 * 검색 조건 카드, 관련 개수 목록 조회
 * @param cardQdo
 */
export declare function findCardWithRelatedCountByRdo(cardQdo: CardQdo): Promise<OffsetElementList<CardWithRelatedCountRdo>>;
/**
 * 검색 조건 카드[유저 대상] 목록 조회
 * @param cardQdo
 */
export declare function findCardForUserViewRdoByCardQdo(cardQdo: CardQdo): Promise<OffsetElementList<CardForUserViewRdo>>;
/**
 * 검색 조건 카드[유저 대상], 과정 개수 목록 조회
 * @param cardWithPhaseCountQdo
 */
export declare function findCardWithPhaseCountForUserViewRdoByCardQdo(cardWithPhaseCountQdo: CardWithPhaseCountQdo): Promise<OffsetElementList<CardWithPhaseCountForUserViewRdo>>;
/**
 * 검색 조건 카드 목록 조회
 * @param cardQdo
 */
export declare function findCardsByRdo(cardQdo: CardQdo): Promise<OffsetElementList<Card>>;
/**
 * 검색 조건, 북마크된 카드[유저 대상] 목록 조회
 * @param cardQdo
 */
export declare function findBookmarkCardForUserViewByCardQdo(cardQdo: CardQdo): Promise<OffsetElementList<CardForUserViewRdo>>;
/**
 * 수강 신청 카드 목록 조회
 * @param excludeClosed
 * @param offset
 * @param limit
 */
export declare function findEnrollingCards(excludeClosed: boolean, offset: number, limit: number): Promise<OffsetElementList<EnrollingCardForUserViewRdo>>;
/**
 * Live 형 카드 목록 조회
 * @param offset
 * @param limit
 */
export declare function findLiveCards(offset: number, limit: number): Promise<OffsetElementList<CardForUserViewRdo>>;
/**
 * 카드, 카드내용, 관련 개수 조회
 * @param id
 */
export declare function findCardById(id: string): Promise<CardWithContentsAndRelatedCountRdo>;
export declare function findCardRelatedCount(id: string): Promise<CardRelatedCount>;
export declare function findCardRelatedCounts(ids: string[]): Promise<CardRelatedCount[]>;
/**
 * 검색 조건 카드 Id 목록 조회
 * @param cardIdQdo
 */
export declare function findIdsByCardIdRdo(cardIdQdo: CardIdQdo): Promise<string[]>;
/**
 * 관련 카드 목록 조회
 * @param id
 */
export declare function findRelatedCards(id: string): Promise<Card[]>;
/**
 * cardId 배열로 카드 이름 목록 가져오기
 * @param ids
 */
export declare function findCardIdNamesByIds(ids: string[]): Promise<IdPolyglotName[]>;
/**
 * 필수 카드 개수 조회
 */
export declare function countRequiredCards(): Promise<number>;
/**
 * 현재 사용자의 스템프 개수 조회
 */
export declare function countUserStamp(): Promise<number>;
/**
 * 필수 과정의 카드 개수 조회
 */
export declare function findRequiredCollegeAndCardCount(): Promise<CollegeAndCardCountRdo[]>;
/**
 * 검색 조건 과정의 카드 개수 목록 조회
 * @param cardCountQdo
 */
export declare function findCollegeAndCardCount(cardCountQdo: CardCountQdo): Promise<CollegeAndCardCountRdo[]>;
/**
 * 카드 개수 조회
 */
export declare function findCardCount(): Promise<CardCount>;
/**
 * 필수 카드유형의 카드 개수 조회
 */
export declare function findRequiredCardTypeAndCardCount(): Promise<CardTypeAndCardCountRdo[]>;
/**
 * 검색 조건 카드유형의 카드 개수 조회
 * @param cardCountQdo
 */
export declare function findCardTypeAndCardCount(cardCountQdo: CardCountQdo): Promise<CardTypeAndCardCountRdo[]>;
/**
 * 채널의 카드 개수 조회
 * @param required 사용 안하는중
 * @param language 사용 안하는중('Korean'으로 고정사용중)
 */
export declare function findChannelAndCardCount(required?: boolean, language?: Language): Promise<ChannelAndCardCountRdo[]>;
/**
 * 필수 카드[유저 대상] 목록 조회
 * @param home
 * @param limit
 */
export declare function findRequiredCards(home: boolean, limit: number): Promise<CardForUserViewRdo[]>;
/**
 * 검색 조건 카드번들 카드, 관련 개수 목록 조회(POST)
 * @param cardFromCardBundleQdo
 */
export declare function findByCardForUserViewRdoFromCardBundleRdo(cardFromCardBundleQdo: CardFromCardBundleQdo): Promise<CardForUserViewRdo[]>;
/**
 * 추천 카드 목록 조회
 * @param limit
 * @param channelLimit
 */
export declare function findRecommendCards(limit: number, channelLimit: number): Promise<RecommendCardRdo[]>;
/**
 * 최근 추천된 카드 목록 조회
 * @param offset
 * @param limit
 */
export declare function findLatestRecommendCards(offset: number, limit: number): Promise<OffsetElementList<CardForUserViewRdo>>;
/**
 * 특정 채널의 추천 카드 목록 조회
 * @param channelId
 * @param offset
 * @param limit
 * @param orderBy
 */
export declare function findRecommendCardsByChannelId(channelId: string, offset: number, limit: number, orderBy: CardOrderBy): Promise<RecommendCardRdo>;
/**
 * 카드 토론 조회
 * @param id
 */
export declare function findCardTalk(id: string): Promise<Talk>;
/**
 * lectureCardId로 Mapping되어 있는 카드 조회
 * @param usid
 */
export declare function findMigCardIdMappingByUsid(usid: string): Promise<MigCardIdMapping>;
/**
 * 학습 예정 목록 조회
 */
export declare function findScheduledLearningRdos(): Promise<ScheduledLearningRdo[]>;
/**
 * 현재 사용자의 연간 학습 시간 조회
 */
export declare function findMyLearningRdo(): Promise<MyLearningRdo>;
/**
 * instructorId로 카드 담당자 이메일 목록 조회
 * @param instructorId
 */
export declare function findCardOperatorEmailsByInstructorId(instructorId: string): Promise<string[]>;
/**
 * cardId 배열로 플레이 리스트 카드 목록 조회
 * @param cardIds
 */
export declare function findPlaylistCardRdos(cardIds: string[]): Promise<PlaylistCardRdo[]>;
/**
 * cardId 배열로 플레이 리스트 진행 정보 목록 조회
 * @param cardIds
 */
export declare function findPlaylistCardWithProgressRdos(cardIds: string[]): Promise<PlaylistCardWithProgressRdo[]>;
/**
 * 카드 조회
 * @param id
 */
export declare function findCard(id: string): Promise<Card>;
/**
 * 검색 조건 학습중 카드 상세 목록 조회
 * @param enrollmentCardDetailQdo
 */
export declare function findEnrollmentCardDetails(enrollmentCardDetailQdo: EnrollmentCardDetailQdo): Promise<OffsetElementList<EnrollmentCardDetailRdo>>;
/**
 * [모바일] 코멘트 모아보기용 '코멘트 모아보기'시에 필요한 추가적인 정보들을 조회
 * @param cardCubeIdPairQdos
 */
export declare function findLectureRdos(cardCubeIdPairQdos: CardCubeIdPairQdo[]): Promise<RelatedLearningContentRdo[]>;
/**
 * 현재 사용자의 진행중인 학습 Card Id 전체 조회
 * @param cardWithPhaseCountQdo
 */
export declare function findMyLearningCardIds(cardWithPhaseCountQdo: CardWithPhaseCountQdo): Promise<string[]>;
/**
 * blended chapter 조회 api
 * @param blendedChapterId
 */
export declare function findBlendedChapter(blendedChapterId: string): Promise<BlendedChapter>;
