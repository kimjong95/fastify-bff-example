import { NameValueList, OffsetElementList, GroupBasedAccessRule } from '../../../shared';
import { AutoEncouragedCardQdo, AutoEncouragedCardRdo, BlendedChapter, BlendedChapterSdo, Card, CardAdminCount, CardAdminQdo, CardByIdForAdminQdo, CardPolyglotUdo, CardSdo, CardWithAccessRuleResultRdo, CardWithContents, CardWithContentsAndRelatedCountRdo, DuplicateCardNameQdo } from '../model';
/**
 * 카드, 카드 내용, 관련 개수 조회
 * @param id
 */
export declare function findCardById_Admin(id: string): Promise<CardWithContentsAndRelatedCountRdo>;
/**
 * cardId 배열로 (카드, 카드내용, 관련 개수) 목록 조회
 * @param ids
 */
export declare function findCardByIds_Admin(ids: string[]): Promise<CardWithContentsAndRelatedCountRdo[]>;
/**
 * CardId 배열로 (카드, 카드내용, 관련 개수) 목록 조회(POST)
 * @param cardByIdForAdminQdo
 */
export declare function findCardByQdo_Admin(cardByIdForAdminQdo: CardByIdForAdminQdo): Promise<CardWithContentsAndRelatedCountRdo[]>;
/**
 * id 배열로 카드 목록 조회
 * @param ids
 */
export declare function findCards_Admin(ids: string[]): Promise<Card[]>;
/**
 * 카드 이름 중복 확인
 * @param duplicateCardNameQdo
 */
export declare function existDuplicateCardName_Admin(duplicateCardNameQdo: DuplicateCardNameQdo): Promise<number>;
/**
 * 검색 조건, 접근제어 (카드, 접근가능여부) 목록 조회
 * @param cardAdminQdo
 * @param groupBasedAccessRuleToAccessCard
 */
export declare function findCardByRdoWithAccessRuleResult_Admin(cardAdminQdo: CardAdminQdo, groupBasedAccessRuleToAccessCard: GroupBasedAccessRule): Promise<OffsetElementList<CardWithAccessRuleResultRdo>>;
/**
 * 검색 조건 카드 (카드, 카드내용, 관련 개수) 목록 조회(Get)
 * @param cardAdminQdo
 */
export declare function findCardByRdo_Admin(cardAdminQdo: CardAdminQdo): Promise<OffsetElementList<CardWithContentsAndRelatedCountRdo>>;
/**
 * 검색 조건, 접근제어 무시 (카드, 접근가능여부) 목록 조회
 * @param cardAdminQdo
 * @param groupBasedAccessRule
 */
export declare function findCardIgnoringAccessibilityByQdo_Admin(cardAdminQdo: CardAdminQdo, groupBasedAccessRule: GroupBasedAccessRule): Promise<OffsetElementList<CardWithAccessRuleResultRdo>>;
/**
 * 최근 승인 카드 목록 가져오기
 * @param lastN
 */
export declare function findLastNApproved_Admin(lastN: number): Promise<CardWithContents[]>;
/**
 * 일별 이수자 많은 카드 목록 조회
 * @param topN
 * @param lastNDay
 */
export declare function findTopNStudentPassedCardsByLastNDay_Admin(topN: number, lastNDay: number): Promise<CardWithContents[]>;
/**
 * cubeId로 큐브 들어가 있는 카드 목록 조회
 * @param cubeId
 */
export declare function findCardByCubeId_Admin(cubeId: string): Promise<CardWithContents[]>;
/**
 * communityId로 커뮤니티 들어 있는 카드 목록 조회
 * @param communityId
 */
export declare function findCardByCommunityId_Admin(communityId: string): Promise<CardWithContents[]>;
/**
 * 카드 조회(카드 수정 시)
 * @param id
 */
export declare function findCardSdo_Admin(id: string): Promise<CardSdo>;
/**
 * 카드 생성
 * @param cardSdo
 * @param requestOpen
 */
export declare function registerCard_Admin(cardSdo: CardSdo, requestOpen: boolean): Promise<string>;
/**
 * 카드 수정
 * @param id
 * @param cardSdo
 */
export declare function modifyCard_Admin(id: string, cardSdo: CardSdo): Promise<void>;
/**
 * 카드 다국어 수정
 * @param id
 * @param cardPolyglotUdo
 */
export declare function modifyPolyglots_Admin(id: string, cardPolyglotUdo: CardPolyglotUdo): Promise<string>;
/**
 * 카드 승인 요청
 * @param id
 */
export declare function requestOpen_Admin(id: string): Promise<void>;
/**
 * 카드 승인
 * @param id
 */
export declare function openCardById_Admin(id: string): Promise<void>;
/**
 * 카드 반려
 * @param id
 * @param nameValues
 */
export declare function rejectCardById_Admin(id: string, nameValues: NameValueList): Promise<void>;
/**
 * 카드 삭제
 * @param id
 */
export declare function deleteCard_Admin(id: string): Promise<void>;
/**
 * 검색 조건 카드 갯수 조회
 * @param cardAdminQdo
 */
export declare function countCard_Admin(cardAdminQdo: CardAdminQdo): Promise<CardAdminCount>;
/**
 * 카드 조회
 * @param id
 */
export declare function findCard_Admin(id: string): Promise<Card>;
/**
 * 자동 독려 있는 카드 목록 조회
 * @param autoEncouragedCardQdo
 */
export declare function findAutoEncouragedCards_Admin(autoEncouragedCardQdo: AutoEncouragedCardQdo): Promise<OffsetElementList<AutoEncouragedCardRdo>>;
/**
 * blendedChapter 조회
 * @param blendedChapterId
 */
export declare function findBlendedChapter_Admin(blendedChapterId: string): Promise<BlendedChapter>;
/**
 * BlendedChapter 생성
 * @param blendedChapterSdo
 */
export declare function registerBlendedChapter_Admin(blendedChapterSdo: BlendedChapterSdo): Promise<string>;
/**
 * BlendedChapter 수정
 * @param blendedChapterId
 * @param blendedChapterSdo
 */
export declare function modifyBlendedChapter_Admin(blendedChapterId: string, blendedChapterSdo: BlendedChapterSdo): Promise<void>;
/**
 * BlendedChapter 삭제
 * @param blendedChapterId
 */
export declare function deleteBlendedChapter_Admin(blendedChapterId: string): Promise<void>;
