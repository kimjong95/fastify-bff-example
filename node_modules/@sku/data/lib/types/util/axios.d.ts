import { AxiosRequestConfig, AxiosResponse } from 'axios';
export declare function getAuthorization(token: string): string;
export declare function getAxios(): {
    get: <T = any, R = AxiosResponse<T, any>>(url: string, config?: AxiosRequestConfig<any> | undefined) => Promise<R | undefined>;
    post: <T_1 = any, R_1 = AxiosResponse<T_1, any>>(url: string, data?: any, config?: AxiosRequestConfig<any> | undefined) => Promise<R_1 | undefined>;
    put: <T_2 = any, R_2 = AxiosResponse<T_2, any>>(url: string, data?: any, config?: AxiosRequestConfig<any> | undefined) => Promise<R_2 | undefined>;
    patch: <T_3 = any, R_3 = AxiosResponse<T_3, any>>(url: string, data?: any, config?: AxiosRequestConfig<any> | undefined) => Promise<R_3 | undefined>;
    delete: <T_4 = any, R_4 = AxiosResponse<T_4, any>>(url: string, config?: AxiosRequestConfig<any> | undefined) => Promise<R_4 | undefined>;
};
export declare function AxiosReturn<T>(response: AxiosResponse<T> | undefined): T | undefined;
export declare function paramsSerializer(paramObj: Record<string, any>): string;
export declare function initAxios(): void;
