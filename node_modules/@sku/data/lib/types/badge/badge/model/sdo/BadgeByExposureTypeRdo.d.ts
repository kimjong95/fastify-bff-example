import { Badge } from './../Badge';
import { CardQm } from './../vo/CardQm';
import { BadgeCategory } from './../../../category/model/BadgeCategory';
import { GroupBasedAccessRule } from './../../../../shared/model/access/GroupBasedAccessRule';
import { OpenRequest } from './../../../../shared/model/approve/OpenRequest';
import { DenizenKey } from './../../../../shared/model/patron/DenizenKey';
import { BadgeImagePath } from './../vo/BadgeImagePath';
import { BadgeType } from './../vo/BadgeType';
import { BadgeState } from './../vo/BadgeState';
import { LangSupport } from './../../../../shared/model/lang/LangSupport';
import { Category, PolyglotString } from 'shared/model';
import { BadgeLevel } from '../vo/BadgeLevel';
export interface BadgeByExposureTypeRdo {
    id: string;
    langSupports: LangSupport[];
    state: BadgeState;
    name: PolyglotString;
    forSelectedMember: boolean;
    type: BadgeType;
    categories: Category[];
    level: BadgeLevel;
    issueAutomatically: boolean;
    additionalRequirementsNeeded: boolean;
    imagePath: BadgeImagePath;
    certificateAuthorityId: string;
    isPlus: boolean;
    qualification: PolyglotString;
    acquisitionRequirements: PolyglotString;
    operator: DenizenKey;
    description: PolyglotString;
    tags: PolyglotString;
    cardIds: string[];
    relatedBadgeIds: string[];
    collegeId: string;
    OpenRequest: OpenRequest;
    registrantName: PolyglotString;
    registeredTime: number;
    learningTime: number;
    modifierName: PolyglotString;
    modifiedTime: number;
    searchable: boolean;
    groupBasedAccessRule: GroupBasedAccessRule;
    category?: BadgeCategory;
    subCategories?: BadgeCategory[];
    cards?: CardQm[];
    relatedBadges?: Badge[];
}
